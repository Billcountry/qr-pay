{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","loading","images","phonenumber","fetch","then","resp","json","setState","map","i","download_url","cost","Math","floor","random","this","trim","error","method","body","JSON","stringify","amount","headers","status","blob","blb","reader","FileReader","readAsDataURL","onloadend","code","result","catch","err","Body","className","alt","src","CircularProgress","TextField","placeholder","label","style","margin","value","onChange","evt","currentTarget","Boolean","img","ImageObject","onClick","getCode","bind","Snackbar","open","message","React","Component","styled","div","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.424863eb.chunk.js","sourcesContent":["import React from \"react\"\nimport styled from \"styled-components\"\nimport { CircularProgress, TextField, Snackbar } from \"@material-ui/core\"\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            loading: true,\n            images: null,\n            phonenumber: \"\",\n        }\n    }\n    componentDidMount() {\n        // Load the images to sell.s\n        fetch(\"https://picsum.photos/v2/list?limit=4\")\n            .then((resp) => resp.json())\n            .then((resp) => {\n                const images = resp\n                this.setState({\n                    images: images.map((i) => ({\n                        download_url: i.download_url,\n                        cost: Math.floor(Math.random() * 10) + 1,\n                    })),\n                    loading: false,\n                })\n            })\n    }\n    getCode(i) {\n        const { images, phonenumber } = this.state\n        if (!phonenumber.trim()) {\n            const error = \"Phone number is required\"\n            this.setState({ images, error })\n            return\n        }\n        this.setState({ loading: true, error: null })\n\n        fetch(\"https://sancom-gaxblohzcq-uc.a.run.app/make/order\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                amount: `${images[i].cost}`,\n                phonenumber: phonenumber.trim(),\n            }),\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n        })\n            .then((resp) => {\n                if (resp.status === 200) {\n                    // Set QR code\n                    resp.blob().then((blb) => {\n                        const reader = new FileReader()\n                        reader.readAsDataURL(blb)\n                        reader.onloadend = () => {\n                            images[i].code = reader.result\n                            this.setState({ loading: false, images })\n                        }\n                    })\n                }\n            })\n            .catch((err) => {\n                images[i].code = null\n                const error = \"An error occurred, please retry.\"\n                this.setState({\n                    loading: false,\n                    images,\n                    error,\n                })\n            })\n    }\n    render() {\n        const { loading, images, phonenumber, error } = this.state\n        return (\n            <Body>\n                <img className=\"logo\" alt=\"\" src=\"/banner.png\" />\n                <div className=\"inner\">\n                    {loading && <CircularProgress className=\"progress\" />}\n                    {!loading && (\n                        <TextField\n                            placeholder=\"254........\"\n                            label=\"Phone Number\"\n                            style={{ margin: 16 }}\n                            value={phonenumber}\n                            onChange={(evt) =>\n                                this.setState({\n                                    phonenumber: evt.currentTarget.value,\n                                })\n                            }\n                        />\n                    )}\n                    {Boolean(images !== null && !loading) && (\n                        <div className=\"images\">\n                            {images.map((img, i) => (\n                                <ImageObject key={i}>\n                                    <img\n                                        className=\"main\"\n                                        src={img.download_url}\n                                        alt=\"\"\n                                    />\n                                    {Boolean(img.code) && (\n                                        <img\n                                            className=\"qr\"\n                                            src={img.code}\n                                            alt=\"\"\n                                        />\n                                    )}\n                                    {!img.code && (\n                                        <button\n                                            className=\"buy\"\n                                            onClick={this.getCode.bind(\n                                                this,\n                                                i\n                                            )}>\n                                            Buy @{img.cost}\n                                        </button>\n                                    )}\n                                </ImageObject>\n                            ))}\n                        </div>\n                    )}\n                </div>\n                {Boolean(error) && <Snackbar open={true} message={error} />}\n            </Body>\n        )\n    }\n}\n\nconst Body = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    .inner {\n        width: 800px;\n        display: flex;\n        padding: 1em 0.5em;\n        flex-direction: column;\n        .progress {\n            align-self: center;\n        }\n        .images {\n            display: flex;\n            flex-wrap: wrap;\n            justify-content: space-around;\n        }\n    }\n    .logo {\n        height: 200px;\n        width: auto;\n    }\n    @media (max-width: 850px) {\n        .inner {\n            width: 95%;\n        }\n    }\n`\n\nconst ImageObject = styled.div`\n    width: calc(50% - 25px);\n    position: relative;\n    background-color: #f1f1f1;\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 10px;\n    border-radius: 5px;\n    .buy {\n        padding: 0.5em 1em;\n        background-color: #1b5e20ee;\n        border-radius: 1em;\n        outline: none;\n        color: #ffffff;\n        cursor: pointer;\n        border: 1px solid #ffffff;\n        min-width: 100px;\n        align-self: center;\n        bottom: 1em;\n        position: absolute;\n        &:hover {\n            background-color: #1b5e20;\n        }\n    }\n    img.main {\n        width: 100%;\n        height: auto;\n    }\n    img.qr {\n        width: 50%;\n        align-self: center;\n        bottom: 1em;\n        position: absolute;\n        opacity: 0.8;\n    }\n`\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}